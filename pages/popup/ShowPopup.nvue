<template>
	<view class="popup" @click="maskClick">
		<uni-transition class="uni-transition" @click="maskClick" :show="true" :duration="200">
			<view class="popup-mask" @click="maskClick">
				<view class="content" v-if="customPopup">
					<view class="hd" v-if="titleText">
							<!-- <image  :src="titleIco"  v-if="showTitleIco"> -->
							<text  class="title" :style="{'color':titleColor}"> {{titleText}}</text>
					</view>
					<view class="bd">
						<text class="text" :style="{'color':contentColor}">{{contentText}}</text>
					</view>
					<view class="ft">
						<view class="btns" v-if="btnType==1">
							
							<button type="default" class="btn" v-if="showCancel" @click="cancel">
								<!-- <image class="ico-png" :src="canceIco"  v-if="showCancelIco"> -->
								<text class="text cancel" :style="{'color':cancelColor}">{{cancelText}}</text>
							</button>
							<view class="line" v-if="showConfirm&&showCancel"></view>
							<button type="default" class="btn" @click="confirm" v-if="showConfirm">
								<!-- <image class="ico-png"  :src="confirmIco"  v-if="showConfirmIco"> -->
								<text class="text confirm" :style="{'color':confirmColor}">{{confirmText}}</text>
							</button>
							
							<view class="line" v-if="showOther"></view>
							<button type="default" class="btn" v-if="showOther" @click="other">
								<!-- <image class="ico-png" :src="otherIco"  v-if="showOtherIco"> -->
								<text class="text other" :style="{'color':otherColor}">{{otherText}}</text>
							</button>
						</view>
						<view class="btns" v-if="btnType==2">
							<button type="default" class="btn" @click="confirm"  v-if="showConfirm">
								<!-- <image class="ico-png"  :src="confirmIco"  v-if="showConfirmIco"> -->
								<text class="text confirm" :style="{'color':confirmColor}">{{confirmText}}</text>
							</button>
							<view class="line" v-if="showCancel&&showConfirm"></view>
							<button type="default" class="btn" v-if="showCancel" @click="cancel">
								<!-- <image class="ico-png"  :src="canceIco"  v-if="showCancelIco"> -->
								<text class="text cancel" :style="{'color':cancelColor}">{{cancelText}}</text>
							</button>
							<view class="line" v-if="showOther&&showCancel"></view>
							<button type="default" class="btn" v-if="showOther" @click="other">
								<!-- <image   class="ico-png"  :src="otherIco"  v-if="showOtherIco"> -->
								<text class="text other" :style="{'color':otherColor}">{{otherText}}</text>
							</button>
						</view>
						 
					</view>
				</view>
			</view>
		</uni-transition>
	</view>
</template>
<script>
	import uniTransition from '@/components/uni-transition/uni-transition.vue'
	export default {
		components: {
			uniTransition
		},
		data() {
			return {
				allowBack: true,
				show: false,
				flag: true
			}
		},
		computed: {
			customPopup() {
				return this.$store.getters.customPopup;
			},
			titleText() {
				this.allowBack = this.$store.getters.customPopup.maskClick;
				return this.$store.getters.customPopup.title;
			},
			titleColor() {
				return this.$store.getters.customPopup.titleColor;
			},
			titleIco() {
				return this.$store.getters.customPopup.titleIco;
			},
			showTitleIco(){
				return this.$store.getters.customPopup.showTitleIco;
			},
			contentText() {
				return this.$store.getters.customPopup.content;
			},
			contentColor() {
				return this.$store.getters.customPopup.contentColor;
			},
			confirmText() {
				return this.$store.getters.customPopup.confirmText;
			},
			cancelText() {
				return this.$store.getters.customPopup.cancelText;
			},
			otherText() {
				return this.$store.getters.customPopup.otherText;
			},
			confirmColor() {
				return this.$store.getters.customPopup.confirmColor;
			},
			cancelColor() {
				return this.$store.getters.customPopup.cancelColor;
			},
			otherColor() {
				return this.$store.getters.customPopup.otherColor;
			},
			showConfirm(){
				return this.$store.getters.customPopup.showConfirm;
			},
			showCancel() {
				return this.$store.getters.customPopup.showCancel;
			},
			showOther() {
				return this.$store.getters.customPopup.showOther;
			},
			confirmIco() {
				return this.$store.getters.customPopup.confirmIco;
			},
			cancelIco() {
				return this.$store.getters.customPopup.cancelIco;
			},
			otherIco() {
				return this.$store.getters.customPopup.otherIco;
			},
			showConfirmIco() {
				return this.$store.getters.customPopup.showConfirmIco;
			},
			showCancelIco() {
				return this.$store.getters.customPopup.showCancelIco;
			},
			showOtherIco() {
				return this.$store.getters.customPopup.showOtherIco;
			},
			btnType() {
				return this.$store.getters.customPopup.btnType;
			}
		},
		onBackPress() {
			this.$store.dispatch('popup/setCache', 2);
			// 不允许点击蒙层的时同时禁止侧滑返回
			if (!this.allowBack) return true;
		},
		onLoad() {
			
			this.$store.dispatch('popup/setCache');
			if (this.$store.state.popup.cache.length > 1) {
				uni.navigateBack();
			}
		},
		onShow() {
			setTimeout(() => {
				this.show = true;
			}, 200)
		},
		methods: {
			confirm() {
				this.allowBack = true;
				let _customPopup = this.$store.getters.customPopup;
				uni.navigateBack();
				if (_customPopup.confirm) {
					_customPopup.confirm(this.$store.getters.customPopup);
				}
			},
			cancel() {
				this.allowBack = true;
				let _customPopup = this.$store.getters.customPopup;
				uni.navigateBack();
				if (_customPopup.cancel) {
					_customPopup.cancel(this.$store.getters.customPopup);
				}
			},
			other() {
				this.allowBack = true;
				let _customPopup = this.$store.getters.customPopup;
				uni.navigateBack();
				if (_customPopup.other) {
					_customPopup.other(this.$store.getters.customPopup);
				}
			},
			// 点击蒙层
			maskClick() {
				let _customPopup = this.$store.getters.customPopup;
				if (_customPopup.maskClick && this.show && this.flag) {
					this.flag = false;
					uni.navigateBack();
					if (_customPopup.cancel) {
						_customPopup.cancel(this.$store.getters.customPopup);
					};
				}
			}
		}
	}
</script>
<style scoped>
	
	 .ico-png{
		 
		  width: 35px;
		  height: 35px;
	 }
	.popup {
		flex: 1;
	}

	.uni-transition {
		flex: 1;
	}

	.popup-mask {
		flex: 1;
		background-color: rgba(0, 0, 0, .5);
		align-items: center;
		justify-content: center;
	}

	.content {
		align-items: center;
		width: 600rpx;
		padding: 30rpx 0 0;
		border-radius: 16rpx;
		background-color: #fff;
	}

	.content .hd .title {
		width: 540rpx;
		margin: 10rpx 0 30rpx;
		overflow: hidden;
		text-overflow: ellipsis;
		lines: 1;
		text-align: center;
		font-weight: 700;
		font-size: 36rpx;
		color: #222;
	}

	.content .bd {
		width: 540rpx;
		margin: 0 0 40rpx;
	}

	.content .bd .text {
		text-align: center;
		line-height: 40rpx;
		font-size: 30rpx;
		color: #222;
	}

	.content .ft {
		width: 600rpx;
		height: 102rpx;
	}

	.content .ft .btns {
		flex: 1;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		border-top: 1px solid #EEE;
	}

	.content .ft .btn {
		flex: 1;
		height: 100rpx;
		border: 0;
		padding: 0;
	}

	.content .ft .btn .text {
		flex: 1;
		height: 100rpx;
		line-height: 100rpx;
		text-align: center;
		font-size: 32rpx;
		color: #222;
		background-color: #fff;
	}

	.content .ft .line {
		height: 100rpx;
		width: 1px;
		background-color: #eee;
	}

	.content .ft,
	.content .ft.btns,
	.content .ft .btn,
	.content .ft .btn .text {
		border-bottom-left-radius: 16rpx;
		border-bottom-right-radius: 16rpx;
		color: #2878FF;
		vertical-align: middle;
		
	}
 
</style>
